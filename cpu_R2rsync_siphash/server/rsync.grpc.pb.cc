// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: rsync.proto

#include "rsync.pb.h"
#include "rsync.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rsync {

static const char* Rsync_method_names[] = {
  "/rsync.Rsync/PreCalcu",
  "/rsync.Rsync/CalcuDiff",
};

std::unique_ptr< Rsync::Stub> Rsync::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rsync::Stub> stub(new Rsync::Stub(channel));
  return stub;
}

Rsync::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PreCalcu_(Rsync_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CalcuDiff_(Rsync_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rsync::Stub::PreCalcu(::grpc::ClientContext* context, const ::rsync::FileHead& request, ::rsync::RsyncReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PreCalcu_, context, request, response);
}

void Rsync::Stub::experimental_async::PreCalcu(::grpc::ClientContext* context, const ::rsync::FileHead* request, ::rsync::RsyncReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PreCalcu_, context, request, response, std::move(f));
}

void Rsync::Stub::experimental_async::PreCalcu(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rsync::RsyncReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PreCalcu_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rsync::RsyncReply>* Rsync::Stub::AsyncPreCalcuRaw(::grpc::ClientContext* context, const ::rsync::FileHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rsync::RsyncReply>::Create(channel_.get(), cq, rpcmethod_PreCalcu_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rsync::RsyncReply>* Rsync::Stub::PrepareAsyncPreCalcuRaw(::grpc::ClientContext* context, const ::rsync::FileHead& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rsync::RsyncReply>::Create(channel_.get(), cq, rpcmethod_PreCalcu_, context, request, false);
}

::grpc::Status Rsync::Stub::CalcuDiff(::grpc::ClientContext* context, const ::rsync::FileInfo& request, ::rsync::RsyncReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CalcuDiff_, context, request, response);
}

void Rsync::Stub::experimental_async::CalcuDiff(::grpc::ClientContext* context, const ::rsync::FileInfo* request, ::rsync::RsyncReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalcuDiff_, context, request, response, std::move(f));
}

void Rsync::Stub::experimental_async::CalcuDiff(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::rsync::RsyncReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CalcuDiff_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::rsync::RsyncReply>* Rsync::Stub::AsyncCalcuDiffRaw(::grpc::ClientContext* context, const ::rsync::FileInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rsync::RsyncReply>::Create(channel_.get(), cq, rpcmethod_CalcuDiff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::rsync::RsyncReply>* Rsync::Stub::PrepareAsyncCalcuDiffRaw(::grpc::ClientContext* context, const ::rsync::FileInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::rsync::RsyncReply>::Create(channel_.get(), cq, rpcmethod_CalcuDiff_, context, request, false);
}

Rsync::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsync_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsync::Service, ::rsync::FileHead, ::rsync::RsyncReply>(
          std::mem_fn(&Rsync::Service::PreCalcu), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsync_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsync::Service, ::rsync::FileInfo, ::rsync::RsyncReply>(
          std::mem_fn(&Rsync::Service::CalcuDiff), this)));
}

Rsync::Service::~Service() {
}

::grpc::Status Rsync::Service::PreCalcu(::grpc::ServerContext* context, const ::rsync::FileHead* request, ::rsync::RsyncReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rsync::Service::CalcuDiff(::grpc::ServerContext* context, const ::rsync::FileInfo* request, ::rsync::RsyncReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rsync

