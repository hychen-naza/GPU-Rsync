// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsync.proto

#include "rsync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_rsync_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileChunkInfo_rsync_2eproto;
namespace rsync {
class FileHeadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileHead> _instance;
} _FileHead_default_instance_;
class FileInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileInfo> _instance;
} _FileInfo_default_instance_;
class FileChunkInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileChunkInfo> _instance;
} _FileChunkInfo_default_instance_;
class RsyncReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RsyncReply> _instance;
} _RsyncReply_default_instance_;
}  // namespace rsync
static void InitDefaultsFileHead_rsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsync::_FileHead_default_instance_;
    new (ptr) ::rsync::FileHead();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsync::FileHead::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileHead_rsync_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileHead_rsync_2eproto}, {}};

static void InitDefaultsFileInfo_rsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsync::_FileInfo_default_instance_;
    new (ptr) ::rsync::FileInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsync::FileInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_FileInfo_rsync_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsFileInfo_rsync_2eproto}, {
      &scc_info_FileChunkInfo_rsync_2eproto.base,}};

static void InitDefaultsFileChunkInfo_rsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsync::_FileChunkInfo_default_instance_;
    new (ptr) ::rsync::FileChunkInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsync::FileChunkInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileChunkInfo_rsync_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileChunkInfo_rsync_2eproto}, {}};

static void InitDefaultsRsyncReply_rsync_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::rsync::_RsyncReply_default_instance_;
    new (ptr) ::rsync::RsyncReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::rsync::RsyncReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RsyncReply_rsync_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRsyncReply_rsync_2eproto}, {}};

void InitDefaults_rsync_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_FileHead_rsync_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileInfo_rsync_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileChunkInfo_rsync_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RsyncReply_rsync_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_rsync_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_rsync_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_rsync_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_rsync_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsync::FileHead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsync::FileHead, filename_),
  PROTOBUF_FIELD_OFFSET(::rsync::FileHead, filesize_),
  PROTOBUF_FIELD_OFFSET(::rsync::FileHead, chunksize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsync::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsync::FileInfo, chunkinfo_),
  PROTOBUF_FIELD_OFFSET(::rsync::FileInfo, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsync::FileChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsync::FileChunkInfo, chunkid_),
  PROTOBUF_FIELD_OFFSET(::rsync::FileChunkInfo, checksum1_),
  PROTOBUF_FIELD_OFFSET(::rsync::FileChunkInfo, checksum2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rsync::RsyncReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::rsync::RsyncReply, success_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::rsync::FileHead)},
  { 8, -1, sizeof(::rsync::FileInfo)},
  { 15, -1, sizeof(::rsync::FileChunkInfo)},
  { 23, -1, sizeof(::rsync::RsyncReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::rsync::_FileHead_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rsync::_FileInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rsync::_FileChunkInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::rsync::_RsyncReply_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_rsync_2eproto = {
  {}, AddDescriptors_rsync_2eproto, "rsync.proto", schemas,
  file_default_instances, TableStruct_rsync_2eproto::offsets,
  file_level_metadata_rsync_2eproto, 4, file_level_enum_descriptors_rsync_2eproto, file_level_service_descriptors_rsync_2eproto,
};

const char descriptor_table_protodef_rsync_2eproto[] =
  "\n\013rsync.proto\022\005rsync\"A\n\010FileHead\022\020\n\010file"
  "Name\030\001 \001(\t\022\020\n\010fileSize\030\002 \001(\005\022\021\n\tchunkSiz"
  "e\030\003 \001(\005\"E\n\010FileInfo\022\'\n\tchunkInfo\030\001 \003(\0132\024"
  ".rsync.FileChunkInfo\022\020\n\010fileName\030\002 \001(\t\"F"
  "\n\rFileChunkInfo\022\017\n\007chunkId\030\001 \001(\005\022\021\n\tchec"
  "ksum1\030\002 \001(\005\022\021\n\tchecksum2\030\003 \001(\t\"\035\n\nRsyncR"
  "eply\022\017\n\007success\030\001 \001(\0102l\n\005Rsync\0220\n\010PreCal"
  "cu\022\017.rsync.FileHead\032\021.rsync.RsyncReply\"\000"
  "\0221\n\tCalcuDiff\022\017.rsync.FileInfo\032\021.rsync.R"
  "syncReply\"\000b\006proto3"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_rsync_2eproto = {
  false, InitDefaults_rsync_2eproto, 
  descriptor_table_protodef_rsync_2eproto,
  "rsync.proto", &assign_descriptors_table_rsync_2eproto, 379,
};

void AddDescriptors_rsync_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_rsync_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rsync_2eproto = []() { AddDescriptors_rsync_2eproto(); return true; }();
namespace rsync {

// ===================================================================

void FileHead::InitAsDefaultInstance() {
}
class FileHead::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileHead::kFileNameFieldNumber;
const int FileHead::kFileSizeFieldNumber;
const int FileHead::kChunkSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileHead::FileHead()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rsync.FileHead)
}
FileHead::FileHead(const FileHead& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&filesize_, &from.filesize_,
    static_cast<size_t>(reinterpret_cast<char*>(&chunksize_) -
    reinterpret_cast<char*>(&filesize_)) + sizeof(chunksize_));
  // @@protoc_insertion_point(copy_constructor:rsync.FileHead)
}

void FileHead::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileHead_rsync_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunksize_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(chunksize_));
}

FileHead::~FileHead() {
  // @@protoc_insertion_point(destructor:rsync.FileHead)
  SharedDtor();
}

void FileHead::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileHead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileHead& FileHead::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileHead_rsync_2eproto.base);
  return *internal_default_instance();
}


void FileHead::Clear() {
// @@protoc_insertion_point(message_clear_start:rsync.FileHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&filesize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chunksize_) -
      reinterpret_cast<char*>(&filesize_)) + sizeof(chunksize_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileHead::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileHead*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // string fileName = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rsync.FileHead.fileName");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // int32 fileSize = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_filesize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 chunkSize = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_chunksize(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rsync.FileHead)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string fileName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rsync.FileHead.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 fileSize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &filesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 chunkSize = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunksize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rsync.FileHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rsync.FileHead)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rsync.FileHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileHead.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // int32 fileSize = 2;
  if (this->filesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->filesize(), output);
  }

  // int32 chunkSize = 3;
  if (this->chunksize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->chunksize(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rsync.FileHead)
}

::google::protobuf::uint8* FileHead::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsync.FileHead)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileHead.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // int32 fileSize = 2;
  if (this->filesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->filesize(), target);
  }

  // int32 chunkSize = 3;
  if (this->chunksize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->chunksize(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsync.FileHead)
  return target;
}

size_t FileHead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsync.FileHead)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileName = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  // int32 fileSize = 2;
  if (this->filesize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->filesize());
  }

  // int32 chunkSize = 3;
  if (this->chunksize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chunksize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsync.FileHead)
  GOOGLE_DCHECK_NE(&from, this);
  const FileHead* source =
      ::google::protobuf::DynamicCastToGenerated<FileHead>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsync.FileHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsync.FileHead)
    MergeFrom(*source);
  }
}

void FileHead::MergeFrom(const FileHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsync.FileHead)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.filesize() != 0) {
    set_filesize(from.filesize());
  }
  if (from.chunksize() != 0) {
    set_chunksize(from.chunksize());
  }
}

void FileHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsync.FileHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileHead::CopyFrom(const FileHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsync.FileHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileHead::IsInitialized() const {
  return true;
}

void FileHead::Swap(FileHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileHead::InternalSwap(FileHead* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(filesize_, other->filesize_);
  swap(chunksize_, other->chunksize_);
}

::google::protobuf::Metadata FileHead::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rsync_2eproto);
  return ::file_level_metadata_rsync_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileInfo::InitAsDefaultInstance() {
}
class FileInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileInfo::kChunkInfoFieldNumber;
const int FileInfo::kFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileInfo::FileInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rsync.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      chunkinfo_(from.chunkinfo_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.filename().size() > 0) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  // @@protoc_insertion_point(copy_constructor:rsync.FileInfo)
}

void FileInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileInfo_rsync_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:rsync.FileInfo)
  SharedDtor();
}

void FileInfo::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileInfo& FileInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileInfo_rsync_2eproto.base);
  return *internal_default_instance();
}


void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rsync.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chunkinfo_.Clear();
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .rsync.FileChunkInfo chunkInfo = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::rsync::FileChunkInfo::_InternalParse;
          object = msg->add_chunkinfo();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // string fileName = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rsync.FileInfo.fileName");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rsync.FileInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .rsync.FileChunkInfo chunkInfo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_chunkinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string fileName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rsync.FileInfo.fileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rsync.FileInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rsync.FileInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rsync.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rsync.FileChunkInfo chunkInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunkinfo_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->chunkinfo(static_cast<int>(i)),
      output);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileInfo.fileName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->filename(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rsync.FileInfo)
}

::google::protobuf::uint8* FileInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsync.FileInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .rsync.FileChunkInfo chunkInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->chunkinfo_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->chunkinfo(static_cast<int>(i)), target);
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileInfo.fileName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->filename(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsync.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsync.FileInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .rsync.FileChunkInfo chunkInfo = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->chunkinfo_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->chunkinfo(static_cast<int>(i)));
    }
  }

  // string fileName = 2;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->filename());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsync.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::google::protobuf::DynamicCastToGenerated<FileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsync.FileInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsync.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsync.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chunkinfo_.MergeFrom(from.chunkinfo_);
  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
}

void FileInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsync.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsync.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::Swap(FileInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  CastToBase(&chunkinfo_)->InternalSwap(CastToBase(&other->chunkinfo_));
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata FileInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rsync_2eproto);
  return ::file_level_metadata_rsync_2eproto[kIndexInFileMessages];
}


// ===================================================================

void FileChunkInfo::InitAsDefaultInstance() {
}
class FileChunkInfo::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileChunkInfo::kChunkIdFieldNumber;
const int FileChunkInfo::kChecksum1FieldNumber;
const int FileChunkInfo::kChecksum2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileChunkInfo::FileChunkInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rsync.FileChunkInfo)
}
FileChunkInfo::FileChunkInfo(const FileChunkInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  checksum2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.checksum2().size() > 0) {
    checksum2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum2_);
  }
  ::memcpy(&chunkid_, &from.chunkid_,
    static_cast<size_t>(reinterpret_cast<char*>(&checksum1_) -
    reinterpret_cast<char*>(&chunkid_)) + sizeof(checksum1_));
  // @@protoc_insertion_point(copy_constructor:rsync.FileChunkInfo)
}

void FileChunkInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_FileChunkInfo_rsync_2eproto.base);
  checksum2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum1_) -
      reinterpret_cast<char*>(&chunkid_)) + sizeof(checksum1_));
}

FileChunkInfo::~FileChunkInfo() {
  // @@protoc_insertion_point(destructor:rsync.FileChunkInfo)
  SharedDtor();
}

void FileChunkInfo::SharedDtor() {
  checksum2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileChunkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FileChunkInfo& FileChunkInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_FileChunkInfo_rsync_2eproto.base);
  return *internal_default_instance();
}


void FileChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:rsync.FileChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  checksum2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&chunkid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&checksum1_) -
      reinterpret_cast<char*>(&chunkid_)) + sizeof(checksum1_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* FileChunkInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<FileChunkInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // int32 chunkId = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_chunkid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // int32 checksum1 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_checksum1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // string checksum2 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("rsync.FileChunkInfo.checksum2");
        object = msg->mutable_checksum2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool FileChunkInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rsync.FileChunkInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 chunkId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunkid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 checksum1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checksum1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string checksum2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_checksum2()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->checksum2().data(), static_cast<int>(this->checksum2().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "rsync.FileChunkInfo.checksum2"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rsync.FileChunkInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rsync.FileChunkInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void FileChunkInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rsync.FileChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chunkId = 1;
  if (this->chunkid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunkid(), output);
  }

  // int32 checksum1 = 2;
  if (this->checksum1() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checksum1(), output);
  }

  // string checksum2 = 3;
  if (this->checksum2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum2().data(), static_cast<int>(this->checksum2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileChunkInfo.checksum2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->checksum2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rsync.FileChunkInfo)
}

::google::protobuf::uint8* FileChunkInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsync.FileChunkInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chunkId = 1;
  if (this->chunkid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunkid(), target);
  }

  // int32 checksum1 = 2;
  if (this->checksum1() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checksum1(), target);
  }

  // string checksum2 = 3;
  if (this->checksum2().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->checksum2().data(), static_cast<int>(this->checksum2().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "rsync.FileChunkInfo.checksum2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->checksum2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsync.FileChunkInfo)
  return target;
}

size_t FileChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsync.FileChunkInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checksum2 = 3;
  if (this->checksum2().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->checksum2());
  }

  // int32 chunkId = 1;
  if (this->chunkid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chunkid());
  }

  // int32 checksum1 = 2;
  if (this->checksum1() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checksum1());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileChunkInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsync.FileChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileChunkInfo* source =
      ::google::protobuf::DynamicCastToGenerated<FileChunkInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsync.FileChunkInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsync.FileChunkInfo)
    MergeFrom(*source);
  }
}

void FileChunkInfo::MergeFrom(const FileChunkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsync.FileChunkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.checksum2().size() > 0) {

    checksum2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.checksum2_);
  }
  if (from.chunkid() != 0) {
    set_chunkid(from.chunkid());
  }
  if (from.checksum1() != 0) {
    set_checksum1(from.checksum1());
  }
}

void FileChunkInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsync.FileChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunkInfo::CopyFrom(const FileChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsync.FileChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunkInfo::IsInitialized() const {
  return true;
}

void FileChunkInfo::Swap(FileChunkInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileChunkInfo::InternalSwap(FileChunkInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  checksum2_.Swap(&other->checksum2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunkid_, other->chunkid_);
  swap(checksum1_, other->checksum1_);
}

::google::protobuf::Metadata FileChunkInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rsync_2eproto);
  return ::file_level_metadata_rsync_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RsyncReply::InitAsDefaultInstance() {
}
class RsyncReply::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RsyncReply::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RsyncReply::RsyncReply()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:rsync.RsyncReply)
}
RsyncReply::RsyncReply(const RsyncReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:rsync.RsyncReply)
}

void RsyncReply::SharedCtor() {
  success_ = false;
}

RsyncReply::~RsyncReply() {
  // @@protoc_insertion_point(destructor:rsync.RsyncReply)
  SharedDtor();
}

void RsyncReply::SharedDtor() {
}

void RsyncReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RsyncReply& RsyncReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RsyncReply_rsync_2eproto.base);
  return *internal_default_instance();
}


void RsyncReply::Clear() {
// @@protoc_insertion_point(message_clear_start:rsync.RsyncReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RsyncReply::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RsyncReply*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RsyncReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:rsync.RsyncReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:rsync.RsyncReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:rsync.RsyncReply)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RsyncReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:rsync.RsyncReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:rsync.RsyncReply)
}

::google::protobuf::uint8* RsyncReply::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:rsync.RsyncReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rsync.RsyncReply)
  return target;
}

size_t RsyncReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rsync.RsyncReply)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RsyncReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:rsync.RsyncReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RsyncReply* source =
      ::google::protobuf::DynamicCastToGenerated<RsyncReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:rsync.RsyncReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:rsync.RsyncReply)
    MergeFrom(*source);
  }
}

void RsyncReply::MergeFrom(const RsyncReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rsync.RsyncReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    set_success(from.success());
  }
}

void RsyncReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:rsync.RsyncReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RsyncReply::CopyFrom(const RsyncReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rsync.RsyncReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RsyncReply::IsInitialized() const {
  return true;
}

void RsyncReply::Swap(RsyncReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RsyncReply::InternalSwap(RsyncReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::google::protobuf::Metadata RsyncReply::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_rsync_2eproto);
  return ::file_level_metadata_rsync_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rsync
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::rsync::FileHead* Arena::CreateMaybeMessage< ::rsync::FileHead >(Arena* arena) {
  return Arena::CreateInternal< ::rsync::FileHead >(arena);
}
template<> PROTOBUF_NOINLINE ::rsync::FileInfo* Arena::CreateMaybeMessage< ::rsync::FileInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rsync::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rsync::FileChunkInfo* Arena::CreateMaybeMessage< ::rsync::FileChunkInfo >(Arena* arena) {
  return Arena::CreateInternal< ::rsync::FileChunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::rsync::RsyncReply* Arena::CreateMaybeMessage< ::rsync::RsyncReply >(Arena* arena) {
  return Arena::CreateInternal< ::rsync::RsyncReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
